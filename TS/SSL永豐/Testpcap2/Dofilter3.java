import java.io.*;
import java.net.*;
import java.util.*;

public class Dofilter3 {

 static public void main(String[] arg)throws Exception{
   DataInputStream os = new DataInputStream(new FileInputStream(arg[0]));
   int dstport = 0;
   int cidx = arg.length - 1;
   FileOutputStream fos = null;
   PcapPkt.skipPcapFileHeader(os);
   RtpPkt prertp = null;
   int predif = 0;
   int  basestamp = 0;
   long basetime_sec = 0;
   long basetime_usec = 0;
   long my_stamp = 0;
   int fidx = 0;
   byte[] jpgHdr =
   {
	 (byte)0xff,(byte)0xd8,				  // SOI
	 (byte)0xff,(byte)0xe0,				  // APP0
	 (byte)0x00,(byte)0x10,				  // APP0 Hdr size
	 (byte)0x4a,(byte)0x46,(byte)0x49,(byte)0x46,(byte)0x00, // ID string
	 (byte)0x01,(byte)0x01,				  // Version
	 (byte)0x00,					  // Bits per type
	 (byte)0x00,(byte)0x00,				  // X density
	 (byte)0x00,(byte)0x00,				  // Y density
	 (byte)0x00,					  // X Thumbnail size
	 (byte)0x00					  // Y Thumbnail size
   };   
   byte[] MJPGDHTSeg =
   {
 	 /* JPEG DHT Segment for YCrCb omitted from MJPG data */
 	(byte)0xFF,(byte)0xC4,(byte)0x01,(byte)0xA2,
 	(byte)0x00,(byte)0x00,(byte)0x01,(byte)0x05,(byte)0x01,(byte)0x01,(byte)0x01,(byte)0x01,(byte)0x01,(byte)0x01,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
 	(byte)0x01,(byte)0x02,(byte)0x03,(byte)0x04,(byte)0x05,(byte)0x06,(byte)0x07,(byte)0x08,(byte)0x09,(byte)0x0A,(byte)0x0B,(byte)0x01,(byte)0x00,(byte)0x03,(byte)0x01,(byte)0x01,(byte)0x01,(byte)0x01,
 	(byte)0x01,(byte)0x01,(byte)0x01,(byte)0x01,(byte)0x01,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x01,(byte)0x02,(byte)0x03,(byte)0x04,(byte)0x05,(byte)0x06,(byte)0x07,
 	(byte)0x08,(byte)0x09,(byte)0x0A,(byte)0x0B,(byte)0x10,(byte)0x00,(byte)0x02,(byte)0x01,(byte)0x03,(byte)0x03,(byte)0x02,(byte)0x04,(byte)0x03,(byte)0x05,(byte)0x05,(byte)0x04,(byte)0x04,(byte)0x00,
 	(byte)0x00,(byte)0x01,(byte)0x7D,(byte)0x01,(byte)0x02,(byte)0x03,(byte)0x00,(byte)0x04,(byte)0x11,(byte)0x05,(byte)0x12,(byte)0x21,(byte)0x31,(byte)0x41,(byte)0x06,(byte)0x13,(byte)0x51,(byte)0x61,
 	(byte)0x07,(byte)0x22,(byte)0x71,(byte)0x14,(byte)0x32,(byte)0x81,(byte)0x91,(byte)0xA1,(byte)0x08,(byte)0x23,(byte)0x42,(byte)0xB1,(byte)0xC1,(byte)0x15,(byte)0x52,(byte)0xD1,(byte)0xF0,(byte)0x24,
 	(byte)0x33,(byte)0x62,(byte)0x72,(byte)0x82,(byte)0x09,(byte)0x0A,(byte)0x16,(byte)0x17,(byte)0x18,(byte)0x19,(byte)0x1A,(byte)0x25,(byte)0x26,(byte)0x27,(byte)0x28,(byte)0x29,(byte)0x2A,(byte)0x34,
 	(byte)0x35,(byte)0x36,(byte)0x37,(byte)0x38,(byte)0x39,(byte)0x3A,(byte)0x43,(byte)0x44,(byte)0x45,(byte)0x46,(byte)0x47,(byte)0x48,(byte)0x49,(byte)0x4A,(byte)0x53,(byte)0x54,(byte)0x55,(byte)0x56,
 	(byte)0x57,(byte)0x58,(byte)0x59,(byte)0x5A,(byte)0x63,(byte)0x64,(byte)0x65,(byte)0x66,(byte)0x67,(byte)0x68,(byte)0x69,(byte)0x6A,(byte)0x73,(byte)0x74,(byte)0x75,(byte)0x76,(byte)0x77,(byte)0x78,
 	(byte)0x79,(byte)0x7A,(byte)0x83,(byte)0x84,(byte)0x85,(byte)0x86,(byte)0x87,(byte)0x88,(byte)0x89,(byte)0x8A,(byte)0x92,(byte)0x93,(byte)0x94,(byte)0x95,(byte)0x96,(byte)0x97,(byte)0x98,(byte)0x99,
 	(byte)0x9A,(byte)0xA2,(byte)0xA3,(byte)0xA4,(byte)0xA5,(byte)0xA6,(byte)0xA7,(byte)0xA8,(byte)0xA9,(byte)0xAA,(byte)0xB2,(byte)0xB3,(byte)0xB4,(byte)0xB5,(byte)0xB6,(byte)0xB7,(byte)0xB8,(byte)0xB9,
 	(byte)0xBA,(byte)0xC2,(byte)0xC3,(byte)0xC4,(byte)0xC5,(byte)0xC6,(byte)0xC7,(byte)0xC8,(byte)0xC9,(byte)0xCA,(byte)0xD2,(byte)0xD3,(byte)0xD4,(byte)0xD5,(byte)0xD6,(byte)0xD7,(byte)0xD8,(byte)0xD9,
 	(byte)0xDA,(byte)0xE1,(byte)0xE2,(byte)0xE3,(byte)0xE4,(byte)0xE5,(byte)0xE6,(byte)0xE7,(byte)0xE8,(byte)0xE9,(byte)0xEA,(byte)0xF1,(byte)0xF2,(byte)0xF3,(byte)0xF4,(byte)0xF5,(byte)0xF6,(byte)0xF7,
 	(byte)0xF8,(byte)0xF9,(byte)0xFA,(byte)0x11,(byte)0x00,(byte)0x02,(byte)0x01,(byte)0x02,(byte)0x04,(byte)0x04,(byte)0x03,(byte)0x04,(byte)0x07,(byte)0x05,(byte)0x04,(byte)0x04,(byte)0x00,(byte)0x01,
 	(byte)0x02,(byte)0x77,(byte)0x00,(byte)0x01,(byte)0x02,(byte)0x03,(byte)0x11,(byte)0x04,(byte)0x05,(byte)0x21,(byte)0x31,(byte)0x06,(byte)0x12,(byte)0x41,(byte)0x51,(byte)0x07,(byte)0x61,(byte)0x71,
 	(byte)0x13,(byte)0x22,(byte)0x32,(byte)0x81,(byte)0x08,(byte)0x14,(byte)0x42,(byte)0x91,(byte)0xA1,(byte)0xB1,(byte)0xC1,(byte)0x09,(byte)0x23,(byte)0x33,(byte)0x52,(byte)0xF0,(byte)0x15,(byte)0x62,
 	(byte)0x72,(byte)0xD1,(byte)0x0A,(byte)0x16,(byte)0x24,(byte)0x34,(byte)0xE1,(byte)0x25,(byte)0xF1,(byte)0x17,(byte)0x18,(byte)0x19,(byte)0x1A,(byte)0x26,(byte)0x27,(byte)0x28,(byte)0x29,(byte)0x2A,
 	(byte)0x35,(byte)0x36,(byte)0x37,(byte)0x38,(byte)0x39,(byte)0x3A,(byte)0x43,(byte)0x44,(byte)0x45,(byte)0x46,(byte)0x47,(byte)0x48,(byte)0x49,(byte)0x4A,(byte)0x53,(byte)0x54,(byte)0x55,(byte)0x56,
 	(byte)0x57,(byte)0x58,(byte)0x59,(byte)0x5A,(byte)0x63,(byte)0x64,(byte)0x65,(byte)0x66,(byte)0x67,(byte)0x68,(byte)0x69,(byte)0x6A,(byte)0x73,(byte)0x74,(byte)0x75,(byte)0x76,(byte)0x77,(byte)0x78,
 	(byte)0x79,(byte)0x7A,(byte)0x82,(byte)0x83,(byte)0x84,(byte)0x85,(byte)0x86,(byte)0x87,(byte)0x88,(byte)0x89,(byte)0x8A,(byte)0x92,(byte)0x93,(byte)0x94,(byte)0x95,(byte)0x96,(byte)0x97,(byte)0x98,
 	(byte)0x99,(byte)0x9A,(byte)0xA2,(byte)0xA3,(byte)0xA4,(byte)0xA5,(byte)0xA6,(byte)0xA7,(byte)0xA8,(byte)0xA9,(byte)0xAA,(byte)0xB2,(byte)0xB3,(byte)0xB4,(byte)0xB5,(byte)0xB6,(byte)0xB7,(byte)0xB8,
 	(byte)0xB9,(byte)0xBA,(byte)0xC2,(byte)0xC3,(byte)0xC4,(byte)0xC5,(byte)0xC6,(byte)0xC7,(byte)0xC8,(byte)0xC9,(byte)0xCA,(byte)0xD2,(byte)0xD3,(byte)0xD4,(byte)0xD5,(byte)0xD6,(byte)0xD7,(byte)0xD8,
 	(byte)0xD9,(byte)0xDA,(byte)0xE2,(byte)0xE3,(byte)0xE4,(byte)0xE5,(byte)0xE6,(byte)0xE7,(byte)0xE8,(byte)0xE9,(byte)0xEA,(byte)0xF2,(byte)0xF3,(byte)0xF4,(byte)0xF5,(byte)0xF6,(byte)0xF7,(byte)0xF8,
 	(byte)0xF9,(byte)0xFA
   };
    byte[] header2 = {(byte)0x00, (byte)0x0C, (byte)0x03, (byte)0x01, (byte)0x00, (byte)0x02, 
    	                (byte)0x11, (byte)0x03, (byte)0x11, (byte)0x00, (byte)0x3F, (byte)0x00};
   FileOutputStream f = new FileOutputStream("tg"+fidx+".jpeg");
   f.write(jpgHdr);
 //  f.write(MJPGDHTSeg);
   f.write(header2);
    while(os.available() > 0)
    { 
       PcapPkt pp = PcapPkt.readPcapPkt(os);
	     if(pp != null)
	     {
	       // System.out.println("pp ip Type:"+pp.getIpType());
	       // System.out.println("    ");
	       
	        if(pp.getIpType() == 17 && pp.udppkt.src_port == 6970)
	        {
	           RtpPkt rtp = new RtpPkt(pp.udppkt.data);
	           //rtp.dumpheader();
	           f.write(rtp.getJPEGBytes());
	           if(rtp.markbit)
	           {
	           	  if(basestamp == 0)
	           	  {
	           	      basestamp = rtp.timestamp;
	           	      basetime_sec = pp.tv_sec;
	           	      basetime_usec = pp.tv_usec;
	           	  }
	           	  {
 	           	      my_stamp = basestamp + ((pp.tv_usec-basetime_usec)+1000000 * (pp.tv_sec-basetime_sec)) * 90000 /1000000;
	           	  }
	           	  f.close();
	           	  fidx++;
	           	  f = new FileOutputStream("tg"+fidx+".jpeg");
                f.write(jpgHdr);
   //             f.write(MJPGDHTSeg);
                f.write(header2);
	           	  System.out.println("my_stamp: "+my_stamp+" pstamp:"+rtp.timestamp+ " diff:"+ (my_stamp - rtp.timestamp));
	              if(prertp!=null)
	              {
	                 int dif = rtp.timestamp - prertp.timestamp;
	                 if(dif != 0)
	                 {
	                   if(predif != dif)
	                   {
	                      System.out.println("tv_sec:"+pp.tv_sec+" tv_usec:"+pp.tv_usec+" "+dif);
	                      prertp.dumpheader();
	                      rtp.dumpheader();
	                   }
  	                 predif = dif;
  	               }
	              }
	              prertp = rtp;
	           }
	           
	        }
	     }
    }
 }
}
